import numpy as np
%matplotlib inline
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

# Parameters
Nx = Ny = 256
dx = dy = 1.0
dt = 1e-3
num_steps = 200
print_step = 20

# Model parameters
alpha = 0.5
beta = 2.5
gamma = 1.0
L = 1
kappa = 10.0
Ngrains = 4

# Initialize phiáµ¢ from random labels
np.random.seed(0)
ran = np.random.randint(1, Ngrains + 1, (Nx, Ny))

phis = np.zeros((Ngrains, Nx, Ny))
for i in range(Ngrains):
    phis[i][ran == (i + 1)] = 1.0

# Laplacian function (periodic boundary conditions)
def laplac(phi, lap):
    for i in range(Nx):
        for j in range(Ny):
            prev_i = (i - 1 + Nx) % Nx
            nex_i = (i + 1) % Nx
            prev_j = (j - 1 + Ny) % Ny
            nex_j = (j + 1) % Ny
            lap[i][j] = ((phi[prev_i][j] + phi[nex_i][j] - 2*phi[i][j])/(dx**2)) + \
                        ((phi[i][prev_j] + phi[i][nex_j] - 2*phi[i][j])/(dy**2))

# Storage for phi evolution history
phi_history = [[] for _ in range(Ngrains)]

# Simulation loop
for step in range(num_steps):
    for i in range(Ngrains):
        phi_i = phis[i]
        sum_phi_j = np.sum(phis**2, axis=0) - phi_i**2
        phi_new = np.copy(phi_i)
        lap = np.zeros_like(phi_i)
        laplac(phi_i, lap)
        phi_new = phi_i - L * dt * (-alpha*phi_i + beta*phi_i**3 + 2*gamma*phi_i*sum_phi_j - kappa*lap)
        phis[i] = phi_new.copy()

    if step % print_step == 0:
        for i in range(Ngrains):
            phi_history[i].append(phis[i].copy())

# Grain color map (autogenerate if more grains than colors defined)
default_colors = np.array([
    [0, 48, 146],   # Custom palette or extend to more
    [0, 135, 158],
    [255, 171, 91],
    [255, 242, 219],
    [200, 50, 100],
    [150, 255, 100],
    [255, 255, 100],
    [50, 50, 255]
]) / 255.0

if Ngrains <= len(default_colors):
    grain_colors = default_colors[:Ngrains]
else:
    rng = np.random.default_rng(42)
    grain_colors = rng.uniform(0, 1, size=(Ngrains, 3))

# Compute grain maps
grain_maps = []
for step_idx in range(len(phi_history[0])):
    phis_snapshot = np.stack([phi_history[i][step_idx] for i in range(Ngrains)], axis=0)
    grain_id = np.argmax(phis_snapshot, axis=0)
    grain_maps.append(grain_id)

# Plotting 5 evenly spaced snapshots
fig, axs = plt.subplots(1, 5, figsize=(16, 4))
steps_to_plot = np.linspace(0, len(grain_maps)-1, 5, dtype=int)

for i, ax in enumerate(axs):
    ax.imshow(grain_colors[grain_maps[steps_to_plot[i]]], origin='lower')
    ax.set_title(f'Time Step: {steps_to_plot[i] * print_step}')
    ax.set_xticks([])
    ax.set_yticks([])

plt.tight_layout()
plt.show()
